// S사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 구매하는데 필요한 금액을 조사했습니다.
// 그러나, 전체 예산이 정해져 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다.
// 그래서 최대한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다.

// 물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 합니다.
// 예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해야 하며,
// 1,000원보다 적은 금액을 지원해 줄 수는 없습니다.

// 부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 주어질 때, 최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 solution 함수를 완성해주세요.

// 제한사항
// d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 1 이상 100 이하입니다.
// d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 이상 100,000 이하의 자연수입니다.
// budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다.

// ex.
// [1,3,2,5,4]	9	3
// [2,2,3,3]	10	4

// 입출력 예 설명
// 입출력 예 #1
// 각 부서에서 [1원, 3원, 2원, 5원, 4원]만큼의 금액을 신청했습니다.
// 만약에, 1원, 2원, 4원을 신청한 부서의 물품을 구매해주면 예산 9원에서 7원이 소비되어 2원이 남습니다.
// 항상 정확히 신청한 금액만큼 지원해 줘야 하므로 남은 2원으로 나머지 부서를 지원해 주지 않습니다.
//  위 방법 외에 3개 부서를 지원해 줄 방법들은 다음과 같습니다.


// 1원, 2원, 3원을 신청한 부서의 물품을 구매해주려면 6원이 필요합니다.
// 1원, 2원, 5원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.
// 1원, 3원, 4원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.
// 1원, 3원, 5원을 신청한 부서의 물품을 구매해주려면 9원이 필요합니다.
// 3개 부서보다 더 많은 부서의 물품을 구매해 줄 수는 없으므로 최대 3개 부서의 물품을 구매해 줄 수 있습니다.

// 입출력 예 #2
// 모든 부서의 물품을 구매해주면 10원이 됩니다. 따라서 최대 4개 부서의 물품을 구매해 줄 수 있습니다.

function solution(d, budget) {
    var answer = 0;
    var sum = 0;
    d.sort();
    d.map((x) => {
        sum += x;
        if (sum <= budget) {
            answer ++;
        } else {
            return;
        }
    })
    return answer;
}

function solution(d, budget) {
    var answer = 0;
    var sum = 0;
    d.sort((a,b) => a-b);

    d.map((x) => {
        sum += x;
        if (sum > budget) {
            return answer;
        } else {
            if(sum <= budget) {
            	answer ++;
            }
        }
    });
    return answer;
}

function solution(d, budget) {
    var answer = 0;

    d.sort((a, b) => a - b);
    var sum = 0;
    for(var i = 0; i < d.length; i++) {
        if(budget < sum + d[i]) break;
        sum += d[i];
        answer++;
    }

    return answer;
}
// 처음에는 조합(Combination)의 개념으로 접근하였지만,
// 레벨1의 수준에서 이해하려고 하여, 단순히 주어진 모든 금액에서 부서의 요청 금액을 빼서 결과를 구해보았다.
// 이건 입출력 예를 읽고, 괜히 잘못 이해하도록 의도된 것은 아닌지 모르겠다.

// 만약에, 1원, 2원, 4원을 신청한 부서의 물품을 구매해주면 예산 9원에서 7원이 소비되어 2원이 남습니다. 항상 정확히 신청한 금액만큼 지원해 줘야 하므로 남은 2원으로 나머지 부서를 지원해 주지 않습니다. 위 방법 외에 3개 부서를 지원해 줄 방법들은 다음과 같습니다.
// 1원, 2원, 3원을 신청한 부서의 물품을 구매해주려면 6원이 필요합니다.
// 1원, 2원, 5원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.
// 1원, 3원, 4원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.
// 1원, 3원, 5원을 신청한 부서의 물품을 구매해주려면 9원이 필요합니다.

// 위의 모든 지문을 읽을 필요가 없었다. 잘못 이해하면, 주어진 모든 금액을 모두 다 사용하여, 신청 부서에 주어야하는 것으로 이해 할 수 있다.
// 그냥,

// 남는 금액에 관계 없이 주어진 금액으로 요청한 금액을 지원할 수 있는 최대의 부서 갯수를 구하시오.

// 라고 했더라면 좀더 쉽지 않았을지...